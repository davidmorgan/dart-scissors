// Polyfills of Compass builtin functions for SassC compatibility.
//
// (SassC is a C++ port of Ruby Sass, roughly 20x faster)
//
// Note: unfortunately, we cannot define a function inside a
// `@if not function-exists(prefix-usage)` branch, which means we can't have
// transparently-defined polyfills included in both Compass & SassC contexts.

/// Whether a given capability should be prefixed for evergreen browsers.
$_capability-needs-prefixing: (
  // http://shouldiprefix.com/#animations
  css-animation: (
    -moz: true,
    -webkit: true,
  ),
  // http://shouldiprefix.com/#box-shadow
  css-boxshadow: (
    -moz: true,
    -webkit: true,
  ),
  css-filters: (
    -webkit: true,
  ),
  css-placeholder: (
    -moz: true,
    -ms: true,
    -webkit: true,
  ),
  // http://shouldiprefix.com/#transitions
  css-transitions: (
    -moz: true,
    -o: true,
    -webkit: true,
  ),
  // http://shouldiprefix.com/#box-sizing
  css3-boxsizing: (
    -moz: true,
    -webkit: true,
  ),
  // http://shouldiprefix.com/#flexbox
  flexbox: (
    -webkit: true,
  ),
  // http://shouldiprefix.com/#transforms
  transforms2d: (
    -moz: true,
    -ms: true,
    -webkit: true,
  ),
  transforms3d: (
    -moz: true,
    -webkit: true,
  ),
  // http://caniuse.com/#feat=user-select-none
  user-select-none: (
    -moz: true,
    -ms: true,
    -webkit: true,
  ),
);

/// The percent of users relying on a particular prefix (between 0 and 1).
///
/// This is used by Compass' vendor-specific prefix heuristics.
///
/// (see compass/core/sass_extensions/functions/cross_browser_support.rb)
@function prefix-usage($prefix, $capability, $capability-options) {
  $needs: map-get($_capability-needs-prefixing, $capability);
  @if not $needs {
    @error 'TODO: please hard-code prefix-usage for #{$capability}.';
  }
  @return if(map-get($needs, $prefix), 1, 0);
}

$_prefixes-by-browser: (
  android: -webkit,
  android-chrome: -webkit,
  android-firefox: -moz,
  blackberry: -webkit,
  chrome: -webkit,
  firefox: -moz,
  ie: -ms,
  ie-mobile: -ms,
  ios-safari: -webkit,
  opera: (-o, -webkit),
  opera-mini: -o,
  opera-mobile: (-o, -webkit),
  safari: -webkit,
);

/// Note: this is trivial to get from $_prefixes-by-browser, but we try and keep
/// the computational cost of these polyfills to a minimum.
$browsers-by-prefix: (
  -moz: (android-firefox, firefox),
  -ms: (ie, ie-mobile),
  -o: (opera, opera-mini, opera-mobile),
  -webkit: (android, android-chrome, blackberry, chrome, ios-safari, opera, opera-mobile, safari),
);

/// The known browsers.
///
/// If prefix is given, limits the returned browsers to those using the specified prefix.
///
/// (see compass/core/sass_extensions/functions/cross_browser_support.rb)
@function browsers($prefix: '') {
  @if $prefix == '' {
    @return map-keys($_prefixes-by-browser);
  } @else {
    @return map-get($browsers-by-prefix, $prefix);
  }
}

@function _unique-values($list, $sorting-order: ()) {
  $set: ();
  @each $value in $list {
    $set: map-merge($set, ($value: true));
  }
  $result: ();
  @each $value in $sorting-order {
    @if map-has-key($set, $value) {
      $result: append($result, $value, comma);
      $set: map-remove($set, $value);
    }
  }
  @return join($result, map-keys($set), comma);
}

/// The prefixes used by the given browsers.
///
/// We sort the resulting prefixes to make testing easier
///
/// (see compass/core/sass_extensions/functions/cross_browser_support.rb)
@function browser-prefixes($browsers) {
  $values: ();
  @each $browser in $browsers {
    $values: join($values, map-get($_prefixes-by-browser, $browser), comma);
  }
  @return _unique-values($values, map-keys($browsers-by-prefix));
}

/// Returns a new list after removing any non-true values.
///
/// (see compass/core/sass_extensions/functions/lists.rb)
@function compact($args...) {
  $result: ();
  @each $arg in $args {
    @if $arg {
      $result: append($result, $arg, comma);
    }
  }
  @return $result;
}

/// No usage check is implemented; return "1" to support everything.
@function omitted-usage($browser, $min-version, $max-version) {
  @return 1;
}
